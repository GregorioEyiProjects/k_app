// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'server/models/appointment-model.dart';
import 'server/models/billing-model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 6634481810941359847),
      name: 'Appointment',
      lastPropertyId: const obx_int.IdUid(5, 6849102573847759673),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5726202758214459293),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 2000552649557671010),
            name: 'userName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4012893619847040575),
            name: 'appointmentDate',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 6821228442662167584),
            name: 'appointmentTime',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 6849102573847759673),
            name: 'establishmentName',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 990186337278359424),
      name: 'Billing',
      lastPropertyId: const obx_int.IdUid(8, 8690417943527209120),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7084866977902847766),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 869696993676531503),
            name: 'appointmentID',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 2316565752688774070),
            name: 'customerName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 8308414128463215470),
            name: 'appointmentDate',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 7687552758909987282),
            name: 'amount',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 5739871711855465694),
            name: 'date',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 9015785600562538945),
            name: 'appointmentTime',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 8690417943527209120),
            name: 'establismentName',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(3, 990186337278359424),
      lastIndexId: const obx_int.IdUid(0, 0),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [1184930772567261702],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        7751117619348870521,
        4220806842815052471,
        7264904363626246197,
        8164218505522319731
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    Appointment: obx_int.EntityDefinition<Appointment>(
        model: _entities[0],
        toOneRelations: (Appointment object) => [],
        toManyRelations: (Appointment object) => {},
        getId: (Appointment object) => object.id,
        setId: (Appointment object, int id) {
          object.id = id;
        },
        objectToFB: (Appointment object, fb.Builder fbb) {
          final userNameOffset = fbb.writeString(object.userName);
          final appointmentTimeOffset = fbb.writeString(object.appointmentTime);
          final establishmentNameOffset =
              fbb.writeString(object.establishmentName);
          fbb.startTable(6);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, userNameOffset);
          fbb.addInt64(2, object.appointmentDate.millisecondsSinceEpoch);
          fbb.addOffset(3, appointmentTimeOffset);
          fbb.addOffset(4, establishmentNameOffset);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final userNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final appointmentDateParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final appointmentTimeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, '');
          final establishmentNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, '');
          final object = Appointment(
              id: idParam,
              userName: userNameParam,
              appointmentDate: appointmentDateParam,
              appointmentTime: appointmentTimeParam,
              establishmentName: establishmentNameParam);

          return object;
        }),
    Billing: obx_int.EntityDefinition<Billing>(
        model: _entities[1],
        toOneRelations: (Billing object) => [],
        toManyRelations: (Billing object) => {},
        getId: (Billing object) => object.id,
        setId: (Billing object, int id) {
          object.id = id;
        },
        objectToFB: (Billing object, fb.Builder fbb) {
          final customerNameOffset = fbb.writeString(object.customerName);
          final appointmentTimeOffset = fbb.writeString(object.appointmentTime);
          final establismentNameOffset =
              fbb.writeString(object.establismentName);
          fbb.startTable(9);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addInt64(1, object.appointmentID);
          fbb.addOffset(2, customerNameOffset);
          fbb.addInt64(3, object.appointmentDate.millisecondsSinceEpoch);
          fbb.addFloat64(4, object.amount);
          fbb.addInt64(5, object.date?.millisecondsSinceEpoch);
          fbb.addOffset(6, appointmentTimeOffset);
          fbb.addOffset(7, establismentNameOffset);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final dateValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 14);
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final customerNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, '');
          final appointmentIDParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final appointmentDateParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0));
          final appointmentTimeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, '');
          final amountParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final dateParam = dateValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(dateValue);
          final establismentNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 18, '');
          final object = Billing(
              id: idParam,
              customerName: customerNameParam,
              appointmentID: appointmentIDParam,
              appointmentDate: appointmentDateParam,
              appointmentTime: appointmentTimeParam,
              amount: amountParam,
              date: dateParam,
              establismentName: establismentNameParam);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Appointment] entity fields to define ObjectBox queries.
class Appointment_ {
  /// See [Appointment.id].
  static final id =
      obx.QueryIntegerProperty<Appointment>(_entities[0].properties[0]);

  /// See [Appointment.userName].
  static final userName =
      obx.QueryStringProperty<Appointment>(_entities[0].properties[1]);

  /// See [Appointment.appointmentDate].
  static final appointmentDate =
      obx.QueryDateProperty<Appointment>(_entities[0].properties[2]);

  /// See [Appointment.appointmentTime].
  static final appointmentTime =
      obx.QueryStringProperty<Appointment>(_entities[0].properties[3]);

  /// See [Appointment.establishmentName].
  static final establishmentName =
      obx.QueryStringProperty<Appointment>(_entities[0].properties[4]);
}

/// [Billing] entity fields to define ObjectBox queries.
class Billing_ {
  /// See [Billing.id].
  static final id =
      obx.QueryIntegerProperty<Billing>(_entities[1].properties[0]);

  /// See [Billing.appointmentID].
  static final appointmentID =
      obx.QueryIntegerProperty<Billing>(_entities[1].properties[1]);

  /// See [Billing.customerName].
  static final customerName =
      obx.QueryStringProperty<Billing>(_entities[1].properties[2]);

  /// See [Billing.appointmentDate].
  static final appointmentDate =
      obx.QueryDateProperty<Billing>(_entities[1].properties[3]);

  /// See [Billing.amount].
  static final amount =
      obx.QueryDoubleProperty<Billing>(_entities[1].properties[4]);

  /// See [Billing.date].
  static final date =
      obx.QueryDateProperty<Billing>(_entities[1].properties[5]);

  /// See [Billing.appointmentTime].
  static final appointmentTime =
      obx.QueryStringProperty<Billing>(_entities[1].properties[6]);

  /// See [Billing.establismentName].
  static final establismentName =
      obx.QueryStringProperty<Billing>(_entities[1].properties[7]);
}
